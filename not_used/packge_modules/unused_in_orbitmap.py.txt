################################################### maybe remove below
    ###################################################
    
        # make_coarse map by aggregating data
    def make_sparsemap(self, orbit_map, sparsity):
        assert isinstance(orbit_map, dict), "orbit_map must be a dict"
        sparse_map = {}
        key_list = sorted(orbit_map)
        for i in range(len(key_list)):
            cur = orbit_map[key_list[i]]   
            instance =  space_average(cur, sparsity,sparsity,self.lat_s,self.lat_e, self.lon_s,self.lon_e) # 0.2 defines sparsity
            cur = instance.space_avg()

            mask = (cur['ColumnAmountO3'] < 200) | (cur['ColumnAmountO3'] > 500)
            df = cur[~mask]
            mean_value = np.mean(df['ColumnAmountO3'])
            cur.loc[mask, 'ColumnAmountO3'] = mean_value

            sparse_map[key_list[i]]  = cur.reset_index(drop=True)
        return sparse_map


    # 2:7432 4:1858, 5:1190, 6:826, 7:607, 8:465
    def coarse_fun(self,df:pd.DataFrame, rho:int)->pd.DataFrame:  # rho has to be integer
        assert isinstance(df, pd.DataFrame), "df must be a pd.DataFrame"
        assert isinstance(rho, int), "rho must be an integer"

        # Sort by latitude, take every rho-th row
        df_sorted_lat = df.sort_values(by='Latitude', ascending=False).iloc[::rho, :]
        # Sort by longitude, take every rho-th row
        df_sorted_lon = df_sorted_lat.sort_values(by='Longitude', ascending=False).iloc[::rho, :]

        mask = df.index.isin(df_sorted_lon.index)
        result = df.loc[mask, :].reset_index(drop=True)
        return result
    
    def make_coarsemap(self,orbit_map:dict, rho:int)->dict:
        assert isinstance(orbit_map, dict), "orbit_map must be a dict"
        assert isinstance(rho, int), "rho must be an integer"
        coarse_map = {}
        key_list = sorted(orbit_map)
        for key in key_list:

            cur = orbit_map[key]
            mask = (cur['ColumnAmountO3'] < 200) | (cur['ColumnAmountO3'] > 500)
            df = cur[~mask]
            mean_value = np.mean(df['ColumnAmountO3'])
            cur.loc[mask, 'ColumnAmountO3'] = mean_value

            instance = self.coarse_fun(cur,rho)

            coarse_map[key] = instance 
        return coarse_map

class databyday_24July:
    def __init__(self):
        pass

    def cutlatitude(self, map, lat_idx):
        keys = sorted(map)
        for key in keys:
            df = map[key]
            cutted_df = df[(df['Latitude']>=lat_idx) & (df['Latitude']< (lat_idx+1))]
            map[key] = cutted_df
        
        return map
    
    def groupbyday(self,map):
        keys = sorted(map)
        grp = defaultdict(list)
        keys_idx = list(range(240))
        grouped_data = [ keys_idx[i:i + 8] for i in range(0, len(keys_idx), 8)]
        for i in range(len(grouped_data)):
            data = None
            for idx in grouped_data[i]:
                if data is not None:
                    data = pd.concat([data, map[keys[idx]]], axis=0)
                else:
                    data = map[keys[idx]]
            grp[i] = data.reset_index(drop=True)
        return grp
    
    def maxmin_ordering(self, coarse_map:dict, mm_cond_number:int):
        assert isinstance(coarse_map, dict), "coarse_map must be a dict"
        assert isinstance(mm_cond_number, int), "mm_cond_number must be an integer"
        keys = sorted(coarse_map)
        sample_data = coarse_map[keys[0]]

        # Extract values
        x1 = sample_data['Longitude'].values
        y1 = sample_data['Latitude'].values 
        coords1 = np.stack((x1, y1), axis=-1)
        # Calculate spatial distances using cdist
        s_dist = cdist(coords1, coords1, 'euclidean')
        # initiate 
        instance = MakeOrbitdata(sample_data, 5,10,110,120) # input is not really here just to use maxmin_naive and finds_nns_naive
        ord_mm, _ = instance.maxmin_naive(s_dist, 0)
        # Construct nearest neighboring set
        
        # Reorder the DataFrame
        sample_data = sample_data.iloc[ord_mm].reset_index(drop=True)  
        coords1_reordered = np.stack((sample_data['Longitude'].values, sample_data['Latitude'].values), axis=-1)
        nns_map = instance.find_nns_naive(locs=coords1_reordered, dist_fun='euclidean', max_nn=mm_cond_number)
        baseset_from_maxmin = ord_mm[:mm_cond_number]

        for key in keys:
            coarse_map[key] = coarse_map[key].iloc[ord_mm].reset_index(drop=True)
        return coarse_map, baseset_from_maxmin, nns_map

    def process(self, coarse_map:dict, lat_idx:int, mm_cond_number:int):
        assert isinstance(coarse_map, dict), "coarse_map must be a dict"
        assert isinstance(lat_idx, int), "lat_idx must be an integer"
        assert isinstance(mm_cond_number, int), "mm_cond_number must be an integer"
        lat_cutted_map = self.cutlatitude(coarse_map, lat_idx)
        lat_cutted_map, baseset_from_maxmin, nns_map = self.maxmin_ordering(lat_cutted_map,mm_cond_number)
        grp = self.groupbyday(lat_cutted_map)
        return grp, baseset_from_maxmin, nns_map 

    def process_nolat(self, coarse_map, mm_cond_number):
        assert isinstance(coarse_map, dict), "coarse_map must be a dict"
        assert isinstance(mm_cond_number, int), "mm_cond_number must be an integer"

        coarse_map, baseset_from_maxmin, nns_map = self.maxmin_ordering(coarse_map, mm_cond_number)
        grp = self.groupbyday(coarse_map)
        return grp, baseset_from_maxmin, nns_map 
    
    def process_forpurespace(self, coarse_map, mm_cond_number):
        assert isinstance(coarse_map, dict), "coarse_map must be a dict"
        assert isinstance(mm_cond_number, int), "mm_cond_number must be an integer"

        coarse_map, _, nns_map = self.maxmin_ordering(coarse_map,mm_cond_number)
        return coarse_map, nns_map
