
        
    def mle_parallel_basin(self, key, bounds, initial_params, input_df, mm_cond_number, nns_map, niter=150):
        try:
            logging.info(f"Starting basinhopping optimization for day {key}")
            print(f"Starting basinhopping optimization for day {key}")  # Debugging line

            result = basinhopping(
                func=self.vecchia_likelihood,
                x0=initial_params,
                minimizer_kwargs={
                    'method': 'L-BFGS-B',
                    'bounds': bounds,  # Use dynamic bounds
                    'args': (input_df, mm_cond_number, nns_map)
                },
                niter=niter
            )
            optimized_params = result.x
            logging.info(
                f"Estimated parameters on {key}: {optimized_params}, "
                f"cond {mm_cond_number}, bounds={bounds}"
            )
            return f"Estimated parameters on {key}: {optimized_params}, cond {mm_cond_number}, bounds={bounds}"
        except Exception as e:
            logging.error(f"Error occurred on {key}: {str(e)}", exc_info=True)
            return f"Error occurred on {key}"
        
    def mle_parallel_nelder_mead(self, key, bounds, initial_params, input_df, mm_cond_number, nns_map):
        try:
            logging.info(f"Starting Nelder-Mead optimization for day {key}")
            print(f"Starting Nelder-Mead optimization for day {key}")  # Debugging line

            # Define a wrapper to handle bounds for Nelder-Mead
            def constrained_vecchia_likelihood(params, input_df, mm_cond_number, nns_map):
                # Apply manual bounds handling
                for i, (low, high) in enumerate(bounds):
                    if not (low <= params[i] <= high):
                        logging.warning(f"Parameter out of bounds: {params}")
                        return float('inf')  # Penalize out-of-bound values heavily
                # Call the actual likelihood function
                return self.vecchia_likelihood(params, input_df, mm_cond_number, nns_map)

            # Perform optimization with Nelder-Mead
            result = minimize(
                fun=constrained_vecchia_likelihood,
                x0=initial_params,
                args=(input_df, mm_cond_number, nns_map),
                method='Nelder-Mead',
                options={'maxiter': 1500, 'disp': True, 'adaptive': True}  # Enable adaptive step sizes
            )

            # Extract and log results
            optimized_params = result.x
            if result.success:
                logging.info(
                    f"Optimization succeeded for day {key}. "
                    f"Parameters: {optimized_params}, "
                    f"Bounds: {bounds}, Condition number: {mm_cond_number}"
                )
                return f"Optimization succeeded for day {key}. Parameters: {optimized_params}, Bounds: {bounds}"
            else:
                logging.warning(f"Optimization failed for day {key}. Message: {result.message}")
                return f"Optimization failed for day {key}. Message: {result.message}"

        except Exception as e:
            logging.error(f"An error occurred for day {key}: {str(e)}", exc_info=True)
            return f"An error occurred for day {key}: {str(e)}"